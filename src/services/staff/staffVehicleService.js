import apiClient from '@/lib/api/apiClient.js';
import { API_ENDPOINTS } from '@/lib/api/apiConfig.js';
import ApiErrorHandler from '@/lib/api/errorHandler.js';

/**
 * Service qu·∫£n l√Ω xe cho nh√¢n vi√™n (Staff)
 * T√≠ch h·ª£p fetch-based apiClient + chu·∫©n h√≥a l·ªói b·∫±ng ApiErrorHandler
 */
const staffVehicleService = {
  /**
   * L·∫•y danh s√°ch xe c·ªßa staff
   * @param {Object} [filters] - Tham s·ªë l·ªçc
   * @returns {Promise<Object>} - Danh s√°ch xe ho·∫∑c th√¥ng tin l·ªói
   */
  async getVehicles(filters = {}) {
    try {
      const data = await apiClient.get(API_ENDPOINTS.STAFF.VEHICLES, filters);
      return { success: true, data };
    } catch (error) {
      const handled = ApiErrorHandler.handleError(error);
      return { success: false, error: handled, message: ApiErrorHandler.getUserMessage(handled) };
    }
  },

  /**
   * L·∫•y th√¥ng tin chi ti·∫øt 1 xe
   * @param {string|number} id
   * @returns {Promise<Object>}
   */
  async getVehicleById(id) {
    try {
      const data = await apiClient.get(API_ENDPOINTS.STAFF.VEHICLE_BY_ID(id));
      return { success: true, data };
    } catch (error) {
      const handled = ApiErrorHandler.handleError(error);
      return { success: false, error: handled, message: ApiErrorHandler.getUserMessage(handled) };
    }
  },

  /**
   * C·∫≠p nh·∫≠t tr·∫°ng th√°i xe (available, maintenance, rented,...)
   * @param {string|number} id
   * @param {string} status
   */
  async updateVehicleStatus(id, status) {
    try {
      const data = await apiClient.patch(API_ENDPOINTS.STAFF.VEHICLE_STATUS(id), { status });
      return { success: true, data };
    } catch (error) {
      const handled = ApiErrorHandler.handleError(error);
      return { success: false, error: handled, message: ApiErrorHandler.getUserMessage(handled) };
    }
  },

  /**
   * üÜï C·∫≠p nh·∫≠t th√¥ng tin k·ªπ thu·∫≠t xe
   * Endpoint: PUT /api/staff/vehicle/{id}
   * @param {number} id - ID c·ªßa xe
   * @param {Object} payload - D·ªØ li·ªáu c·∫≠p nh·∫≠t {brand, model, capacity, rangePerFullCharge}
   */
  async updateVehicle(id, payload) {
    try {
      const data = await apiClient.put(API_ENDPOINTS.STAFF.VEHICLE_BY_ID(id), payload);
      return { success: true, data };
    } catch (error) {
      const handled = ApiErrorHandler.handleError(error);
      return { success: false, error: handled, message: ApiErrorHandler.getUserMessage(handled) };
    }
  },
};

export default staffVehicleService;
